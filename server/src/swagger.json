{
	"openapi": "3.0.2",
	"info": {
		"title": "Node Swagger Example",
		"description": "This is just an example of how to use swagger in a node/express application",
		"version": "1.0.0",
		"contact": {
			"name": "Victor Badar√≥",
			"email": "victor.badaro@fatec.sp.gov.br",
			"url": "https://github.com/victorbadaro"
		}
	},
	"paths": {
		"/users": {
			"post": {
				"tags": [
					"User"
				],
				"summary": "Create a user",
				"description": "Create a new user",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"email": {
										"type": "string"
									}
								},
								"example": {
									"name": "Shauna Farrell",
									"email": "shauna.farrell@email.com"
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"id": {
											"type": "number"
										},
										"name": {
											"type": "string"
										},
										"email": {
											"type": "string"
										}
									},
									"example": {
										"id": 5,
										"name": "Shauna Farrell",
										"email": "shauna.farrell@email.com"
									}
								}
							}
						}
					},
					"400": {
						"description": "Email is already in use",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string",
											"example": "Email is already in use"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"tags": [
					"User"
				],
				"summary": "List users",
				"description": "List created users",
				"responses": {
					"200": {
						"description": "A json array of users",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"id": {
												"type": "number"
											},
											"name": {
												"type": "string"
											},
											"email": {
												"type": "string"
											}
										}
									},
									"example": [
										{
											"id": 1,
											"name": "Keira Holman",
											"email": "keira.holman@email.com"
										},
										{
											"id": 2,
											"name": "Tiffany Harding",
											"email": "tiffany.harding@email.com"
										},
										{
											"id": 3,
											"name": "Riya Pittman",
											"email": "riya.pittman@email.com"
										},
										{
											"id": 4,
											"name": "Liberty Kent",
											"email": "liberty.kent@email.com"
										}
									]
								}
							}
						}
					}
				}
			}
		},
		"/users/{id}": {
			"get": {
				"tags": [
					"User"
				],
				"summary": "Get user by ID",
				"description": "Get a user by their ID",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the user to get",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int64"
						}
					}
				],
				"responses": {
					"200": {
						"description": "User found"
					},
					"404": {
						"description": "User not found"
					}
				}
			},
			"put": {
				"tags": [
					"User"
				],
				"summary": "Update a user",
				"description": "Update an existing user",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the user to update",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int64"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"email": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "User updated"
					},
					"400": {
						"description": "Invalid request data"
					},
					"404": {
						"description": "User not found"
					}
				}
			}
		}
	}
}
